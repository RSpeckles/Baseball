\doxysection{algorithms.\+h File Reference}
\hypertarget{algorithms_8h}{}\label{algorithms_8h}\index{algorithms.h@{algorithms.h}}


This file contains the declaration of various algorithms and helper functions.  


{\ttfamily \#include $<$QDebug$>$}\newline
{\ttfamily \#include $<$QString$>$}\newline
{\ttfamily \#include $<$QMap$>$}\newline
{\ttfamily \#include $<$QIODevice$>$}\newline
{\ttfamily \#include $<$QFile$>$}\newline
{\ttfamily \#include $<$queue$>$}\newline
{\ttfamily \#include $<$QQueue$>$}\newline
{\ttfamily \#include $<$unordered\+\_\+set$>$}\newline
{\ttfamily \#include $<$fstream$>$}\newline
{\ttfamily \#include $<$sstream$>$}\newline
{\ttfamily \#include $<$string$>$}\newline
{\ttfamily \#include $<$vector$>$}\newline
{\ttfamily \#include $<$unordered\+\_\+map$>$}\newline
Include dependency graph for algorithms.\+h\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\doxysubsubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \mbox{\hyperlink{struct_distance}{Distance}}
\begin{DoxyCompactList}\small\item\em A structure to represent a distance between two stadiums. \end{DoxyCompactList}\item 
struct \mbox{\hyperlink{struct_stadium}{Stadium}}
\begin{DoxyCompactList}\small\item\em A structure to represent a stadium and its connections. \end{DoxyCompactList}\item 
struct \mbox{\hyperlink{struct_edge}{Edge}}
\begin{DoxyCompactList}\small\item\em A structure to represent an edge in a graph. \end{DoxyCompactList}\item 
struct \mbox{\hyperlink{struct_compare_edge}{Compare\+Edge}}
\begin{DoxyCompactList}\small\item\em A structure to compare two edges based on their weights. \end{DoxyCompactList}\item 
struct \mbox{\hyperlink{struct_stadium_q}{StadiumQ}}
\begin{DoxyCompactList}\small\item\em A structure to represent a stadium and its connections in a QMap. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
std\+::vector$<$ \mbox{\hyperlink{struct_distance}{Distance}} $>$ \mbox{\hyperlink{algorithms_8h_affc9c7daf16de5723a81aa5157f45b40}{parse\+Distance\+CSV}} (const QString \&filename)
\begin{DoxyCompactList}\small\item\em Function to parse a CSV file and build a vector of distances. \end{DoxyCompactList}\item 
std\+::vector$<$ \mbox{\hyperlink{struct_stadium}{Stadium}} $>$ \mbox{\hyperlink{algorithms_8h_a511ae46297b565c6c28acca8d536b784}{build\+Graph}} (const std\+::vector$<$ \mbox{\hyperlink{struct_distance}{Distance}} $>$ \&distances)
\begin{DoxyCompactList}\small\item\em Function to build a graph from a vector of distances. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{algorithms_8h_aa96a8f013c928f8c8196958285c7bf8a}{print\+MSTPath}} (const std\+::unordered\+\_\+map$<$ QString, QString $>$ \&parent)
\begin{DoxyCompactList}\small\item\em Function to print the path of a minimum spanning tree. \end{DoxyCompactList}\item 
QMap$<$ QString, \mbox{\hyperlink{struct_stadium_q}{StadiumQ}} $>$ \mbox{\hyperlink{algorithms_8h_aa661178639f18c90b138e3a245c92cf7}{parse\+CSV}} (const QString \&filename)
\begin{DoxyCompactList}\small\item\em Function to parse a CSV file and build a graph. \end{DoxyCompactList}\item 
std\+::unordered\+\_\+map$<$ std\+::string, std\+::vector$<$ std\+::pair$<$ std\+::string, int $>$ $>$ $>$ \mbox{\hyperlink{algorithms_8h_ab55e4daeafee710a09ed692cab757c13}{parse\+CSV2}} (const QString \&file\+\_\+path)
\begin{DoxyCompactList}\small\item\em Function to parse a CSV file and build a graph. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{algorithms_8h_af3b3bb98f17c23db2247eb6ce0e62771}{dfs}} (const QMap$<$ QString, \mbox{\hyperlink{struct_stadium_q}{StadiumQ}} $>$ \&graph, const QString \&start\+Stadium, QMap$<$ QString, bool $>$ \&visited)
\begin{DoxyCompactList}\small\item\em Function to perform a depth-\/first search on a graph. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{algorithms_8h_a14ffa130d6cdc788284539b66c57cd72}{bfs}} (const QMap$<$ QString, \mbox{\hyperlink{struct_stadium_q}{StadiumQ}} $>$ \&graph, const QString \&start\+Stadium)
\begin{DoxyCompactList}\small\item\em Function to perform a breadth-\/first search on a graph. \end{DoxyCompactList}\item 
std\+::vector$<$ \mbox{\hyperlink{struct_edge}{Edge}} $>$ \mbox{\hyperlink{algorithms_8h_a2130387bbcf468d34db0f724955f216f}{prim\+MST}} (const std\+::unordered\+\_\+map$<$ std\+::string, std\+::vector$<$ std\+::pair$<$ std\+::string, int $>$ $>$ $>$ \&graph)
\begin{DoxyCompactList}\small\item\em Function to find the minimum spanning tree of a graph using Prim\textquotesingle{}s algorithm. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
This file contains the declaration of various algorithms and helper functions. 



\doxysubsection{Function Documentation}
\Hypertarget{algorithms_8h_a14ffa130d6cdc788284539b66c57cd72}\label{algorithms_8h_a14ffa130d6cdc788284539b66c57cd72} 
\index{algorithms.h@{algorithms.h}!bfs@{bfs}}
\index{bfs@{bfs}!algorithms.h@{algorithms.h}}
\doxysubsubsection{\texorpdfstring{bfs()}{bfs()}}
{\footnotesize\ttfamily int bfs (\begin{DoxyParamCaption}\item[{const QMap$<$ QString, \mbox{\hyperlink{struct_stadium_q}{StadiumQ}} $>$ \&}]{graph,  }\item[{const QString \&}]{start\+Stadium }\end{DoxyParamCaption})}



Function to perform a breadth-\/first search on a graph. 


\begin{DoxyParams}{Parameters}
{\em graph} & The graph to perform the search on. \\
\hline
{\em start\+Stadium} & The starting stadium for the search. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The total distance travelled. 
\end{DoxyReturn}
\Hypertarget{algorithms_8h_a511ae46297b565c6c28acca8d536b784}\label{algorithms_8h_a511ae46297b565c6c28acca8d536b784} 
\index{algorithms.h@{algorithms.h}!buildGraph@{buildGraph}}
\index{buildGraph@{buildGraph}!algorithms.h@{algorithms.h}}
\doxysubsubsection{\texorpdfstring{buildGraph()}{buildGraph()}}
{\footnotesize\ttfamily std\+::vector$<$ \mbox{\hyperlink{struct_stadium}{Stadium}} $>$ build\+Graph (\begin{DoxyParamCaption}\item[{const std\+::vector$<$ \mbox{\hyperlink{struct_distance}{Distance}} $>$ \&}]{distances }\end{DoxyParamCaption})}



Function to build a graph from a vector of distances. 


\begin{DoxyParams}{Parameters}
{\em distances} & A vector of distances. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A vector of stadiums. 
\end{DoxyReturn}
\Hypertarget{algorithms_8h_af3b3bb98f17c23db2247eb6ce0e62771}\label{algorithms_8h_af3b3bb98f17c23db2247eb6ce0e62771} 
\index{algorithms.h@{algorithms.h}!dfs@{dfs}}
\index{dfs@{dfs}!algorithms.h@{algorithms.h}}
\doxysubsubsection{\texorpdfstring{dfs()}{dfs()}}
{\footnotesize\ttfamily int dfs (\begin{DoxyParamCaption}\item[{const QMap$<$ QString, \mbox{\hyperlink{struct_stadium_q}{StadiumQ}} $>$ \&}]{graph,  }\item[{const QString \&}]{start\+Stadium,  }\item[{QMap$<$ QString, bool $>$ \&}]{visited }\end{DoxyParamCaption})}



Function to perform a depth-\/first search on a graph. 


\begin{DoxyParams}{Parameters}
{\em graph} & The graph to perform the search on. \\
\hline
{\em start\+Stadium} & The starting stadium for the search. \\
\hline
{\em visited} & A QMap to keep track of visited stadiums. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The total distance travelled. 
\end{DoxyReturn}
\Hypertarget{algorithms_8h_aa661178639f18c90b138e3a245c92cf7}\label{algorithms_8h_aa661178639f18c90b138e3a245c92cf7} 
\index{algorithms.h@{algorithms.h}!parseCSV@{parseCSV}}
\index{parseCSV@{parseCSV}!algorithms.h@{algorithms.h}}
\doxysubsubsection{\texorpdfstring{parseCSV()}{parseCSV()}}
{\footnotesize\ttfamily QMap$<$ QString, \mbox{\hyperlink{struct_stadium_q}{StadiumQ}} $>$ parse\+CSV (\begin{DoxyParamCaption}\item[{const QString \&}]{filename }\end{DoxyParamCaption})}



Function to parse a CSV file and build a graph. 


\begin{DoxyParams}{Parameters}
{\em filename} & The name of the CSV file. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A graph in the form of a QMap. 
\end{DoxyReturn}
\Hypertarget{algorithms_8h_ab55e4daeafee710a09ed692cab757c13}\label{algorithms_8h_ab55e4daeafee710a09ed692cab757c13} 
\index{algorithms.h@{algorithms.h}!parseCSV2@{parseCSV2}}
\index{parseCSV2@{parseCSV2}!algorithms.h@{algorithms.h}}
\doxysubsubsection{\texorpdfstring{parseCSV2()}{parseCSV2()}}
{\footnotesize\ttfamily std\+::unordered\+\_\+map$<$ std\+::string, std\+::vector$<$ std\+::pair$<$ std\+::string, int $>$ $>$ $>$ parse\+CSV2 (\begin{DoxyParamCaption}\item[{const QString \&}]{file\+\_\+path }\end{DoxyParamCaption})}



Function to parse a CSV file and build a graph. 


\begin{DoxyParams}{Parameters}
{\em file\+\_\+path} & The path of the CSV file. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A graph in the form of an unordered\+\_\+map. 
\end{DoxyReturn}
\Hypertarget{algorithms_8h_affc9c7daf16de5723a81aa5157f45b40}\label{algorithms_8h_affc9c7daf16de5723a81aa5157f45b40} 
\index{algorithms.h@{algorithms.h}!parseDistanceCSV@{parseDistanceCSV}}
\index{parseDistanceCSV@{parseDistanceCSV}!algorithms.h@{algorithms.h}}
\doxysubsubsection{\texorpdfstring{parseDistanceCSV()}{parseDistanceCSV()}}
{\footnotesize\ttfamily std\+::vector$<$ \mbox{\hyperlink{struct_distance}{Distance}} $>$ parse\+Distance\+CSV (\begin{DoxyParamCaption}\item[{const QString \&}]{filename }\end{DoxyParamCaption})}



Function to parse a CSV file and build a vector of distances. 


\begin{DoxyParams}{Parameters}
{\em filename} & The name of the CSV file. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A vector of distances. 
\end{DoxyReturn}
\Hypertarget{algorithms_8h_a2130387bbcf468d34db0f724955f216f}\label{algorithms_8h_a2130387bbcf468d34db0f724955f216f} 
\index{algorithms.h@{algorithms.h}!primMST@{primMST}}
\index{primMST@{primMST}!algorithms.h@{algorithms.h}}
\doxysubsubsection{\texorpdfstring{primMST()}{primMST()}}
{\footnotesize\ttfamily std\+::vector$<$ \mbox{\hyperlink{struct_edge}{Edge}} $>$ prim\+MST (\begin{DoxyParamCaption}\item[{const std\+::unordered\+\_\+map$<$ std\+::string, std\+::vector$<$ std\+::pair$<$ std\+::string, int $>$ $>$ $>$ \&}]{graph }\end{DoxyParamCaption})}



Function to find the minimum spanning tree of a graph using Prim\textquotesingle{}s algorithm. 


\begin{DoxyParams}{Parameters}
{\em graph} & The graph to find the minimum spanning tree of. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A vector of edges representing the minimum spanning tree. 
\end{DoxyReturn}
\Hypertarget{algorithms_8h_aa96a8f013c928f8c8196958285c7bf8a}\label{algorithms_8h_aa96a8f013c928f8c8196958285c7bf8a} 
\index{algorithms.h@{algorithms.h}!printMSTPath@{printMSTPath}}
\index{printMSTPath@{printMSTPath}!algorithms.h@{algorithms.h}}
\doxysubsubsection{\texorpdfstring{printMSTPath()}{printMSTPath()}}
{\footnotesize\ttfamily void print\+MSTPath (\begin{DoxyParamCaption}\item[{const std\+::unordered\+\_\+map$<$ QString, QString $>$ \&}]{parent }\end{DoxyParamCaption})}



Function to print the path of a minimum spanning tree. 


\begin{DoxyParams}{Parameters}
{\em parent} & The parent map of the minimum spanning tree. \\
\hline
\end{DoxyParams}
